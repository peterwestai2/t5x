from __gin__ import dynamic_registration

import __main__ as train_script
from t5.data import mixtures
from t5x import models
from t5x import partitioning
from t5x import utils
import sys
import seqio
from t5x import trainer

import t5x.make_diamond_task as task_
include "t5x/examples/t5/t5_1_1/xl.gin"
include "t5x/configs/runs/finetune.gin"

BATCH_SIZE = 64

MIXTURE_OR_TASK_NAME = "diamond_pretraining_v1"
TASK_FEATURE_LENGTHS = {"inputs": 512, "targets": 128}
TRAIN_STEPS = 1300000 # need to adjust... 1000000 pretraining setps, 19565670 datapoints / 64 batch = 300K 
DROPOUT_RATE = 0.1
# INITIAL_CHECKPOINT_PATH = "gs://t5-data/pretrained_models/t5x/t5_1_1_xl/checkpoint_1000000/"
INITIAL_CHECKPOINT_PATH = "gs://t5-data/pretrained_models/t5x/t5_1_1_lm100k_xl/checkpoint_1100000"
# `LOSS_NORMALIZING_FACTOR`: When fine-tuning a model that was pre-trained
# using Mesh Tensorflow (e.g. the public T5 / mT5 / ByT5 models), this should be
# set to `pretraining batch_size` * `target_token_length`. For T5 and T5.1.1:
# `2048 * 114`. For mT5: `1024 * 229`. For ByT5: `1024 * 189`.
LOSS_NORMALIZING_FACTOR = 233472

train_script.train:
  eval_period = 500

train_script.train:
  train_dataset_cfg = @train/utils.DatasetConfig()
  train_eval_dataset_cfg = @train_eval/utils.DatasetConfig()
  infer_eval_dataset_cfg = @infer_eval/utils.DatasetConfig()

trainer.Trainer:
  num_microbatches = 16
  learning_rate_fn = @utils.create_learning_rate_scheduler()
utils.create_learning_rate_scheduler:
  factors = 'constant'
  base_learning_rate = 0.00001
  warmup_steps = 1000

train/utils.DatasetConfig:
  mixture_or_task_name = "diamond_pretraining_v1"
  split = 'train'

train_eval/utils.DatasetConfig:
  mixture_or_task_name = "diamond_pretraining_v1"
  split = 'valid'


infer_eval/utils.DatasetConfig:
  mixture_or_task_name = %MIXTURE_OR_TASK_NAME
  task_feature_lengths = %TASK_FEATURE_LENGTHS
  split = 'validation'
  batch_size = 32
  shuffle = False
  seed = 42
  use_cached = %USE_CACHED_TASKS
  pack = False
  module = %MIXTURE_OR_TASK_MODULE

seqio.Evaluator:
  logger_cls = [@seqio.PyLoggingLogger, @seqio.TensorBoardLogger, @seqio.JSONLogger]
  num_examples = None  # Use all examples in the dataset.
  use_memory_cache = True
