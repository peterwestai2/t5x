from __gin__ import dynamic_registration

import __main__ as train_script
from t5.data import mixtures
from t5x import models
from t5x import partitioning
from t5x import utils
#import t5x.atomic_tasks as atomic_tasks # to get my mixture
import t5x.standard_tasks_v4 as standard_task
import seqio
from t5x import trainer

include "t5x/examples/t5/t5_1_1/xxl.gin"
include "t5x/configs/runs/finetune.gin"

BATCH_SIZE = 64

MIXTURE_OR_TASK_NAME = "standard_v4_train_mix"
TASK_FEATURE_LENGTHS = {"inputs": 128, "targets": 128}
TRAIN_STEPS = 1_100_000  # 1000000 pre-trained steps + 50000 fine-tuning steps.
DROPOUT_RATE = 0.1
INITIAL_CHECKPOINT_PATH = "gs://t5-data/pretrained_models/t5x/t5_1_1_xxl/checkpoint_1000000"
# `LOSS_NORMALIZING_FACTOR`: When fine-tuning a model that was pre-trained
# using Mesh Tensorflow (e.g. the public T5 / mT5 / ByT5 models), this should be
# set to `pretraining batch_size` * `target_token_length`. For T5 and T5.1.1:
# `2048 * 114`. For mT5: `1024 * 229`. For ByT5: `1024 * 189`.
LOSS_NORMALIZING_FACTOR = 233472


train_script.train:
  eval_period = 500
  
train_script.train:
  train_dataset_cfg = @train/utils.DatasetConfig()
  train_eval_dataset_cfg = @train_eval/utils.DatasetConfig()
  infer_eval_dataset_cfg = @infer_eval/utils.DatasetConfig()
  
trainer.Trainer:
  num_microbatches = 16
  learning_rate_fn = @utils.create_learning_rate_scheduler()
utils.create_learning_rate_scheduler:
  factors = 'constant'
  base_learning_rate = 0.000001
  warmup_steps = 1000
  
train/utils.DatasetConfig:
  mixture_or_task_name = "standard_v4_train_mix"
  split = 'train'

train_eval/utils.DatasetConfig:
  mixture_or_task_name = "standard_v4_train_mix"
  split = 'validation'


infer_eval/utils.DatasetConfig:
  mixture_or_task_name = %MIXTURE_OR_TASK_NAME
  task_feature_lengths = %TASK_FEATURE_LENGTHS
  split = 'validation'
  batch_size = 64
  shuffle = False
  seed = 42
  use_cached = %USE_CACHED_TASKS
  pack = False
  module = %MIXTURE_OR_TASK_MODULE

seqio.Evaluator:
  logger_cls = [@seqio.PyLoggingLogger, @seqio.TensorBoardLogger, @seqio.JSONLogger]
  num_examples = 3000  # Use all examples in the dataset.
  use_memory_cache = True
